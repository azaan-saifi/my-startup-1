"use client";

import { useState, useRef, useEffect } from "react";
import {
  FiCheck,
  FiX,
  FiChevronRight,
  FiChevronLeft,
  FiRefreshCw,
  FiAward,
  FiPlay,
  FiLock,
} from "react-icons/fi";

import {
  getQuizProgress,
  updateQuizProgress,
  completeQuiz,
} from "@/lib/actions/quizProgress.action";

interface Question {
  id: string;
  text: string;
  options: {
    id: string;
    text: string;
    isCorrect: boolean;
  }[];
  explanation: string;
}

interface ReinforcementQuestion {
  id: string;
  text: string;
  options: {
    id: string;
    text: string;
    isCorrect: boolean;
  }[];
  explanation: string;
  difficulty: "easy" | "medium" | "hard";
}

// Mock function to simulate fetching reinforcement questions from an API
const getReinforcementQuestion = (
  originalQuestion: Question,
  wrongAnswerIdx: number
): Promise<ReinforcementQuestion> => {
  // In a real implementation, this would call an API with the question and wrong answer
  return new Promise((resolve) => {
    setTimeout(() => {
      // For demonstration, generate a simpler version of the question
      // In a real app, this would be generated by an API or fetched from a database
      const wrongOption = originalQuestion.options[wrongAnswerIdx]?.text || "";

      resolve({
        id: `reinforcement-${originalQuestion.id}`,
        text: `Let&apos;s try a different approach to help you understand: Why isn&apos;t "${wrongOption}" the correct answer?`,
        options: [
          {
            id: `r-${originalQuestion.id}-a`,
            text: `${wrongOption} contradicts the main concept shown in the video.`,
            isCorrect: true,
          },
          {
            id: `r-${originalQuestion.id}-b`,
            text: `${wrongOption} is actually correct in a different context.`,
            isCorrect: false,
          },
          {
            id: `r-${originalQuestion.id}-c`,
            text: `${wrongOption} is a common misconception but isn&apos;t supported by evidence.`,
            isCorrect: false,
          },
          {
            id: `r-${originalQuestion.id}-d`,
            text: `${wrongOption} is completely unrelated to the video content.`,
            isCorrect: false,
          },
        ],
        explanation: `The option "${wrongOption}" isn&apos;t correct because it misunderstands a key point from the video. The correct concepts were actually demonstrated when the instructor explained the core principles. This reinforcement question helps you identify why certain misconceptions occur.`,
        difficulty: "medium",
      });
    }, 1000);
  });
};

// Sample questions - in a real app, these would come from an API
const sampleQuestions: Question[] = [
  {
    id: "q1",
    text: "What is a key concept from this video?",
    options: [
      { id: "q1-a", text: "Sample answer 1", isCorrect: true },
      { id: "q1-b", text: "Sample answer 2", isCorrect: false },
      { id: "q1-c", text: "Sample answer 3", isCorrect: false },
      { id: "q1-d", text: "Sample answer 4", isCorrect: false },
    ],
    explanation:
      "This is an explanation of why the correct answer is the right one. In a real implementation, this would provide valuable information to help the student understand the concept better.",
  },
  {
    id: "q2",
    text: "Which of the following statements is true based on the video content?",
    options: [
      { id: "q2-a", text: "Sample statement 1", isCorrect: false },
      { id: "q2-b", text: "Sample statement 2", isCorrect: true },
      { id: "q2-c", text: "Sample statement 3", isCorrect: false },
      { id: "q2-d", text: "Sample statement 4", isCorrect: false },
    ],
    explanation:
      "This explanation would provide context about why the statement is true and might reference specific parts of the video to reinforce the learning.",
  },
  {
    id: "q3",
    text: "How would you apply the main technique demonstrated in this video?",
    options: [
      { id: "q3-a", text: "Application method 1", isCorrect: false },
      { id: "q3-b", text: "Application method 2", isCorrect: false },
      { id: "q3-c", text: "Application method 3", isCorrect: true },
      { id: "q3-d", text: "Application method 4", isCorrect: false },
    ],
    explanation:
      "The correct application method involves understanding how the principle works in practice. This explanation would clarify why the other options aren't as effective.",
  },
];

interface CoursePracticeQuizProps {
  videoTitle: string;
  videoId: string;
  courseId: string;
  userId: string;
  watchedPercent?: number;
  onQuizCompleted?: () => void;
}

const CoursePracticeQuiz = ({
  videoTitle,
  videoId,
  courseId,
  userId,
  watchedPercent = 0,
  onQuizCompleted,
}: CoursePracticeQuizProps) => {
  const contentRef = useRef<HTMLDivElement>(null);
  const [quizStarted, setQuizStarted] = useState(false);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedOptionId, setSelectedOptionId] = useState<string | null>(null);
  const [hasSubmitted, setHasSubmitted] = useState(false);
  const [quizCompleted, setQuizCompleted] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  // Reinforcement learning states
  const [showReinforcement, setShowReinforcement] = useState(false);
  const [reinforcementQuestion, setReinforcementQuestion] =
    useState<ReinforcementQuestion | null>(null);
  const [reinforcementOptionId, setReinforcementOptionId] = useState<
    string | null
  >(null);
  const [reinforcementSubmitted, setReinforcementSubmitted] = useState(false);
  const [loadingReinforcement, setLoadingReinforcement] = useState(false);
  const [reinforcementAttempts, setReinforcementAttempts] = useState(0);
  const [reinforcementSuccess, setReinforcementSuccess] = useState(false);
  const [maxAttemptsReached, setMaxAttemptsReached] = useState(false);

  // Tracking answers and explanations for each question
  const [questionStates, setQuestionStates] = useState<{
    answerSelected: (string | null)[];
    showExplanation: boolean[];
    isCorrect: boolean[];
    attemptedReinforcement: boolean[];
    mastered: boolean[];
  }>({
    answerSelected: sampleQuestions.map(() => null),
    showExplanation: sampleQuestions.map(() => false),
    isCorrect: sampleQuestions.map(() => false),
    attemptedReinforcement: sampleQuestions.map(() => false),
    mastered: sampleQuestions.map(() => false),
  });

  // Process questions with video title
  const currentQuestion = quizStarted
    ? {
        ...sampleQuestions[currentQuestionIndex],
        text: sampleQuestions[currentQuestionIndex].text.replace(
          "this video",
          `"${videoTitle}"`
        ),
      }
    : null;

  const isLastQuestion = currentQuestionIndex === sampleQuestions.length - 1;
  const canStartQuiz = watchedPercent >= 95;

  // Load quiz progress from database
  useEffect(() => {
    const loadQuizProgress = async () => {
      if (!userId || !videoId) return;

      setIsLoading(true);
      try {
        const progressData = await getQuizProgress(videoId, userId);
        const progress = JSON.parse(progressData);

        // Update local state with saved progress
        setQuizStarted(progress.quizStarted);
        setQuizCompleted(progress.quizCompleted);
        setCurrentQuestionIndex(progress.currentQuestionIndex || 0);

        // Initialize question states with saved data
        if (progress.selectedAnswers && progress.selectedAnswers.length > 0) {
          setSelectedOptionId(
            progress.selectedAnswers[progress.currentQuestionIndex]
          );
          setHasSubmitted(
            progress.showExplanations[progress.currentQuestionIndex] || false
          );

          setQuestionStates({
            answerSelected:
              progress.selectedAnswers || sampleQuestions.map(() => null),
            showExplanation:
              progress.showExplanations || sampleQuestions.map(() => false),
            isCorrect:
              progress.correctAnswers || sampleQuestions.map(() => false),
            attemptedReinforcement:
              progress.attemptedReinforcement ||
              sampleQuestions.map(() => false),
            mastered: progress.mastered || sampleQuestions.map(() => false),
          });
        }

        // If quiz is already marked as completed, notify parent
        if (progress.quizCompleted && onQuizCompleted) {
          onQuizCompleted();
        }
      } catch (error) {
        console.error("Error loading quiz progress:", error);
      } finally {
        setIsLoading(false);
      }
    };

    loadQuizProgress();
  }, [userId, videoId, onQuizCompleted]);

  // Save quiz progress to database whenever state changes
  useEffect(() => {
    const saveQuizProgress = async () => {
      if (!userId || !videoId || !courseId || isLoading) return;

      try {
        await updateQuizProgress(videoId, userId, courseId, {
          quizStarted,
          quizCompleted,
          currentQuestionIndex,
          selectedAnswers: questionStates.answerSelected,
          showExplanations: questionStates.showExplanation,
          correctAnswers: questionStates.isCorrect,
          attemptedReinforcement: questionStates.attemptedReinforcement,
          mastered: questionStates.mastered,
        });
      } catch (error) {
        console.error("Error saving quiz progress:", error);
      }
    };

    saveQuizProgress();
  }, [
    userId,
    videoId,
    courseId,
    quizStarted,
    quizCompleted,
    currentQuestionIndex,
    questionStates,
    isLoading,
  ]);

  // Auto-scroll to top when question changes
  useEffect(() => {
    contentRef.current?.scrollTo({ top: 0, behavior: "smooth" });
  }, [currentQuestionIndex, showReinforcement]);

  const handleStartQuiz = async () => {
    if (canStartQuiz) {
      setQuizStarted(true);

      // Save the started state to database
      if (userId && videoId && courseId) {
        try {
          await updateQuizProgress(videoId, userId, courseId, {
            quizStarted: true,
          });
        } catch (error) {
          console.error("Error saving quiz start state:", error);
        }
      }
    }
  };

  const handleOptionSelect = (optionId: string) => {
    if (hasSubmitted) return;
    setSelectedOptionId(optionId);
  };

  const handleSubmitAnswer = () => {
    if (!selectedOptionId || hasSubmitted || !currentQuestion) return;

    const selectedOption = currentQuestion.options.find(
      (option) => option.id === selectedOptionId
    );
    const isCorrect = selectedOption?.isCorrect || false;

    // Update question states
    const newQuestionStates = { ...questionStates };
    newQuestionStates.answerSelected[currentQuestionIndex] = selectedOptionId;
    newQuestionStates.showExplanation[currentQuestionIndex] = true;
    newQuestionStates.isCorrect[currentQuestionIndex] = isCorrect;
    setQuestionStates(newQuestionStates);

    setHasSubmitted(true);

    if (isCorrect) {
      newQuestionStates.mastered[currentQuestionIndex] = true;
    }
  };

  const handleStartReinforcement = async () => {
    if (!selectedOptionId || !currentQuestion) return;

    setShowReinforcement(true);
    setLoadingReinforcement(true);
    setReinforcementAttempts(0);
    setMaxAttemptsReached(false);
    setReinforcementSuccess(false);

    // Find the index of the selected option
    const selectedIndex = currentQuestion.options.findIndex(
      (option) => option.id === selectedOptionId
    );

    // Mark this question as having attempted reinforcement
    const newQuestionStates = { ...questionStates };
    newQuestionStates.attemptedReinforcement[currentQuestionIndex] = true;
    setQuestionStates(newQuestionStates);

    try {
      const reinforcementQ = await getReinforcementQuestion(
        sampleQuestions[currentQuestionIndex],
        selectedIndex
      );
      setReinforcementQuestion(reinforcementQ);
    } catch (error) {
      console.error("Failed to get reinforcement question:", error);
    } finally {
      setLoadingReinforcement(false);
    }
  };

  const handleReinforcementOptionSelect = (optionId: string) => {
    if (reinforcementSubmitted) return;
    setReinforcementOptionId(optionId);
  };

  const handleSubmitReinforcementAnswer = () => {
    if (
      !reinforcementOptionId ||
      reinforcementSubmitted ||
      !reinforcementQuestion
    )
      return;

    const selectedOption = reinforcementQuestion.options.find(
      (option) => option.id === reinforcementOptionId
    );
    const isCorrect = selectedOption?.isCorrect || false;

    setReinforcementSubmitted(true);

    if (isCorrect) {
      setReinforcementSuccess(true);

      // Mark this question as mastered if reinforcement was successful
      const newQuestionStates = { ...questionStates };
      newQuestionStates.mastered[currentQuestionIndex] = true;
      setQuestionStates(newQuestionStates);
    } else {
      const newAttempts = reinforcementAttempts + 1;
      setReinforcementAttempts(newAttempts);

      if (newAttempts >= 3) {
        setMaxAttemptsReached(true);
      }
    }
  };

  const handleTryReinforcementAgain = () => {
    setReinforcementOptionId(null);
    setReinforcementSubmitted(false);
  };

  const handleReturnToQuestion = () => {
    setShowReinforcement(false);
    setReinforcementQuestion(null);
    setReinforcementOptionId(null);
    setReinforcementSubmitted(false);
    setReinforcementAttempts(0);
  };

  const handleNextQuestion = () => {
    if (isLastQuestion) {
      setQuizCompleted(true);
    } else {
      setCurrentQuestionIndex((prev) => prev + 1);
      setSelectedOptionId(
        questionStates.answerSelected[currentQuestionIndex + 1]
      );
      setHasSubmitted(questionStates.showExplanation[currentQuestionIndex + 1]);
    }
  };

  const handlePreviousQuestion = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex((prev) => prev - 1);
      setSelectedOptionId(
        questionStates.answerSelected[currentQuestionIndex - 1]
      );
      setHasSubmitted(questionStates.showExplanation[currentQuestionIndex - 1]);
    }
  };

  const handleFinishQuiz = async () => {
    // Mark quiz as completed in database
    if (userId && videoId && courseId) {
      try {
        await completeQuiz(videoId, userId, courseId);
      } catch (error) {
        console.error("Error completing quiz:", error);
      }
    }

    // Notify parent component that quiz is completed
    if (onQuizCompleted) {
      onQuizCompleted();
    }

    // Reset local quiz state (for UI only)
    setQuizStarted(false);
    setQuizCompleted(true);
  };

  // Calculate overall mastery
  const masteryCount = questionStates.mastered.filter(Boolean).length;
  const masteryPercentage = Math.round(
    (masteryCount / sampleQuestions.length) * 100
  );

  // Quiz loading screen
  if (isLoading) {
    return (
      <div className="flex h-[500px] flex-col items-center justify-center rounded-lg bg-black/40 p-6 text-center">
        <div className="mb-6 size-10 animate-spin rounded-full border-4 border-zinc-600 border-t-[#f0bb1c]"></div>
        <p className="text-zinc-400">Loading quiz data...</p>
      </div>
    );
  }

  // If quiz is already completed, show a message
  if (quizCompleted) {
    return (
      <div className="flex h-[500px] flex-col items-center justify-center rounded-lg bg-black/40 p-6 text-center">
        <div className="mb-6 flex size-16 items-center justify-center rounded-full bg-green-900/20">
          <FiCheck className="size-8 text-green-500" />
        </div>

        <h3 className="mb-2 text-xl font-medium text-white">Quiz Completed</h3>
        <p className="mb-6 text-zinc-400">
          You have already completed this quiz and can move on to the next
          video.
        </p>
      </div>
    );
  }

  // Quiz start screen
  if (!quizStarted) {
    return (
      <div className="flex h-[500px] flex-col items-center justify-center rounded-lg bg-black/40 p-6 text-center">
        <div className="mb-6 flex size-16 items-center justify-center rounded-full bg-zinc-800">
          {canStartQuiz ? (
            <FiPlay className="size-6 text-[#f0bb1c]" />
          ) : (
            <FiLock className="size-6 text-zinc-500" />
          )}
        </div>

        <h3 className="mb-2 text-xl font-medium text-white">Practice Quiz</h3>

        {canStartQuiz ? (
          <>
            <p className="mb-6 text-zinc-400">
              Ready to test your understanding of
              <br />
              <span className="font-semibold text-white">{videoTitle}</span>?
            </p>

            <p className="mb-6 text-sm text-zinc-500">
              This quiz will test your understanding of the key concepts covered
              in this video.
              <br />
              You&apos;ll need to complete the quiz before proceeding to the
              next video.
            </p>

            <button
              onClick={handleStartQuiz}
              className="flex items-center justify-center rounded-md bg-[#f0bb1c] px-6 py-2 text-sm font-medium text-black hover:bg-[#f0bb1c]/80"
            >
              Start Quiz
            </button>
          </>
        ) : (
          <>
            <p className="mb-6 text-zinc-400">
              You need to watch at least 95% of the video before taking the
              quiz.
            </p>

            <div className="mb-6 w-full max-w-md space-y-2">
              <div className="h-2 w-full rounded-full bg-zinc-800">
                <div
                  className="h-2 rounded-full bg-zinc-600"
                  style={{ width: `${Math.round(watchedPercent)}%` }}
                ></div>
              </div>
              <div className="flex justify-between text-xs text-zinc-500">
                <span>Current progress: {Math.round(watchedPercent)}%</span>
                <span>Required: 95%</span>
              </div>
            </div>

            <button
              disabled
              className="flex cursor-not-allowed items-center justify-center rounded-md bg-zinc-800 px-6 py-2 text-sm font-medium text-zinc-500"
            >
              Continue Watching
            </button>
          </>
        )}
      </div>
    );
  }

  if (quizCompleted) {
    return (
      <div className="flex h-[500px] flex-col items-center justify-center rounded-lg bg-black/40 p-6 text-center">
        <h3 className="mb-4 text-xl font-medium text-white">Quiz Complete!</h3>

        <div className="mb-6 flex size-32 items-center justify-center rounded-full border-4 border-[#f0bb1c]">
          <div className="flex flex-col items-center">
            <span className="text-3xl font-bold text-white">
              {masteryPercentage}%
            </span>
            <span className="text-xs text-zinc-400">Mastery</span>
          </div>
        </div>

        <p className="mb-2 text-lg text-white">
          You mastered {masteryCount} out of {sampleQuestions.length} concepts
        </p>

        <div className="mb-6 mt-4 w-full">
          <div className="mb-2 text-left text-sm font-medium text-zinc-400">
            Concept Mastery
          </div>
          <div className="space-y-2">
            {sampleQuestions.map((question, index) => (
              <div
                key={question.id}
                className="flex items-center justify-between"
              >
                <span className="text-sm text-zinc-300">
                  Concept {index + 1}
                </span>
                <div className="flex items-center">
                  {questionStates.mastered[index] ? (
                    <span className="flex items-center text-sm text-green-500">
                      <FiCheck className="mr-1" /> Mastered
                    </span>
                  ) : (
                    <span className="flex items-center text-sm text-amber-500">
                      <FiRefreshCw className="mr-1" /> Needs Review
                    </span>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="flex flex-wrap gap-2">
          <button
            onClick={handleFinishQuiz}
            className="flex items-center rounded-md bg-[#f0bb1c] px-4 py-2 text-sm font-medium text-black hover:bg-[#f0bb1c]/80"
          >
            <FiCheck className="mr-1" /> Finish and Continue
          </button>

          {masteryCount < sampleQuestions.length && (
            <button
              onClick={() => {
                // Find the first non-mastered question
                const nonMasteredIndex = questionStates.mastered.findIndex(
                  (mastered) => !mastered
                );
                if (nonMasteredIndex >= 0) {
                  setCurrentQuestionIndex(nonMasteredIndex);
                  setSelectedOptionId(
                    questionStates.answerSelected[nonMasteredIndex]
                  );
                  setHasSubmitted(
                    questionStates.showExplanation[nonMasteredIndex]
                  );
                  setQuizCompleted(false);
                }
              }}
              className="flex items-center rounded-md border border-[#f0bb1c] bg-transparent px-4 py-2 text-sm font-medium text-[#f0bb1c] hover:bg-[#f0bb1c]/10"
            >
              Review Weak Areas
            </button>
          )}
        </div>
      </div>
    );
  }

  if (showReinforcement) {
    return (
      <div className="flex h-[500px] flex-col rounded-lg bg-black/40 p-6">
        <div
          ref={contentRef}
          className="custom-scrollbar flex-1 overflow-y-auto pr-3"
        >
          <div className="mb-6">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium text-white">
                Reinforcement Learning
              </h3>
              <p className="text-sm font-medium text-amber-500">
                Building Understanding
              </p>
            </div>

            <div className="mt-4 rounded-lg border border-amber-500/30 bg-amber-500/5 p-3">
              <p className="text-sm text-zinc-300">
                Let&apos;s reinforce your understanding with a targeted question
                to help you master this concept.
              </p>
            </div>

            {loadingReinforcement ? (
              <div className="mt-8 flex flex-col items-center justify-center">
                <div className="size-10 animate-spin rounded-full border-4 border-zinc-600 border-t-[#f0bb1c]"></div>
                <p className="mt-4 text-zinc-400">
                  Generating personalized reinforcement question...
                </p>
              </div>
            ) : reinforcementQuestion ? (
              <>
                <h4 className="mb-4 mt-6 text-base font-medium text-amber-500">
                  {reinforcementQuestion.text}
                </h4>

                <div className="space-y-3">
                  {reinforcementQuestion.options.map((option) => {
                    const isSelected = reinforcementOptionId === option.id;
                    const isCorrect =
                      option.isCorrect && reinforcementSubmitted;
                    const isIncorrect =
                      !option.isCorrect && isSelected && reinforcementSubmitted;

                    return (
                      <button
                        key={option.id}
                        onClick={() =>
                          handleReinforcementOptionSelect(option.id)
                        }
                        className={`flex w-full items-center justify-between rounded-md border p-3 text-left text-sm transition-colors ${
                          isSelected
                            ? isCorrect
                              ? "border-green-500 bg-green-500/10"
                              : isIncorrect
                              ? "border-red-500 bg-red-500/10"
                              : "border-amber-500 bg-amber-500/10"
                            : "border-zinc-800 bg-zinc-900/50 hover:border-zinc-700"
                        }`}
                        disabled={reinforcementSubmitted}
                      >
                        <span className="text-zinc-300">{option.text}</span>
                        {reinforcementSubmitted && (
                          <span>
                            {option.isCorrect ? (
                              <FiCheck className="text-green-500" />
                            ) : isIncorrect ? (
                              <FiX className="text-red-500" />
                            ) : null}
                          </span>
                        )}
                      </button>
                    );
                  })}
                </div>

                {!reinforcementSubmitted ? (
                  <div className="mt-6 flex justify-center">
                    <button
                      onClick={handleSubmitReinforcementAnswer}
                      disabled={!reinforcementOptionId}
                      className="flex w-full items-center justify-center rounded-md bg-amber-500 px-4 py-2 text-sm font-medium text-black hover:bg-amber-600 disabled:opacity-50"
                    >
                      Submit Answer
                    </button>
                  </div>
                ) : (
                  <div className="mt-6 rounded-lg border border-zinc-800 bg-zinc-900/50 p-4">
                    <h5 className="mb-2 font-medium text-white">
                      Explanation:
                    </h5>
                    <p className="text-sm text-zinc-300">
                      {reinforcementQuestion.explanation}
                    </p>

                    <div className="mt-6 flex flex-wrap justify-center gap-2">
                      {reinforcementSuccess ? (
                        <div className="flex flex-col items-center">
                          <div className="mb-4 flex items-center justify-center rounded-full bg-green-500/20 p-3">
                            <FiAward className="size-6 text-green-500" />
                          </div>
                          <p className="mb-4 text-center text-green-500">
                            Great job! You&apos;ve demonstrated understanding of
                            this concept.
                          </p>
                          <button
                            onClick={handleReturnToQuestion}
                            className="flex items-center justify-center rounded-md bg-[#f0bb1c] px-6 py-2 text-sm font-medium text-black hover:bg-[#f0bb1c]/80"
                          >
                            Continue
                          </button>
                        </div>
                      ) : maxAttemptsReached ? (
                        <div className="flex flex-col items-center text-center">
                          <p className="mb-4 font-medium text-amber-500">
                            We recommend reviewing this concept in the video
                            again
                          </p>
                          <div className="flex gap-2">
                            <button
                              onClick={handleReturnToQuestion}
                              className="flex items-center rounded-md border border-zinc-600 bg-zinc-800 px-4 py-2 text-sm font-medium text-white hover:bg-zinc-700"
                            >
                              Return to Question
                            </button>
                          </div>
                        </div>
                      ) : (
                        <button
                          onClick={handleTryReinforcementAgain}
                          className="flex items-center rounded-md bg-amber-600 px-4 py-2 text-sm font-medium text-white hover:bg-amber-700"
                        >
                          Try Again ({3 - reinforcementAttempts} attempts left)
                        </button>
                      )}
                    </div>
                  </div>
                )}
              </>
            ) : (
              <div className="mt-6 text-center text-zinc-400">
                Something went wrong.
                <button
                  onClick={handleReturnToQuestion}
                  className="ml-2 text-[#f0bb1c] hover:underline"
                >
                  Return to question
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="flex h-[500px] flex-col rounded-lg bg-black/40 p-6">
      <div
        ref={contentRef}
        className="custom-scrollbar flex-1 overflow-y-auto pr-3"
      >
        <div className="mb-6">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-medium text-white">
              Practice Questions
            </h3>
            <p className="text-sm font-medium text-zinc-400">
              Question {currentQuestionIndex + 1} of {sampleQuestions.length}
            </p>
          </div>
          <div className="mt-2 h-1.5 w-full rounded-full bg-zinc-800">
            <div
              className="h-1.5 rounded-full bg-[#f0bb1c]"
              style={{
                width: `${
                  ((currentQuestionIndex + (hasSubmitted ? 1 : 0)) /
                    sampleQuestions.length) *
                  100
                }%`,
              }}
            ></div>
          </div>

          {/* Concept mastery indicator */}
          {questionStates.mastered[currentQuestionIndex] && (
            <div className="mt-2 flex items-center justify-end">
              <span className="flex items-center text-xs text-green-500">
                <FiCheck className="mr-1" /> Concept Mastered
              </span>
            </div>
          )}
        </div>

        <div className="mb-6">
          <h4 className="mb-4 text-base font-medium text-white">
            {currentQuestion?.text}
          </h4>
          <div className="space-y-3">
            {currentQuestion?.options.map((option) => {
              const isSelected = selectedOptionId === option.id;
              const isCorrect = option.isCorrect && hasSubmitted;
              const isIncorrect =
                !option.isCorrect && isSelected && hasSubmitted;

              return (
                <button
                  key={option.id}
                  onClick={() => handleOptionSelect(option.id)}
                  className={`flex w-full items-center justify-between rounded-md border p-3 text-left text-sm transition-colors ${
                    isSelected
                      ? isCorrect
                        ? "border-green-500 bg-green-500/10"
                        : isIncorrect
                        ? "border-red-500 bg-red-500/10"
                        : "border-[#f0bb1c] bg-[#f0bb1c]/10"
                      : "border-zinc-800 bg-zinc-900/50 hover:border-zinc-700"
                  }`}
                  disabled={hasSubmitted}
                >
                  <span className={isSelected ? "text-white" : "text-zinc-300"}>
                    {option.text}
                  </span>
                  {hasSubmitted && (
                    <span>
                      {option.isCorrect ? (
                        <FiCheck className="text-green-500" />
                      ) : isIncorrect ? (
                        <FiX className="text-red-500" />
                      ) : null}
                    </span>
                  )}
                </button>
              );
            })}
          </div>
        </div>

        {hasSubmitted && (
          <div className="mb-6 rounded-md border border-zinc-800 bg-zinc-900/50 p-4">
            <h5 className="mb-2 font-medium text-white">
              {questionStates.isCorrect[currentQuestionIndex]
                ? "Great job! Here&apos;s why that&apos;s correct:"
                : "Why was that incorrect?"}
            </h5>
            <p className="text-sm text-zinc-300">
              {currentQuestion?.explanation}
            </p>

            {!questionStates.isCorrect[currentQuestionIndex] &&
              !questionStates.attemptedReinforcement[currentQuestionIndex] && (
                <div className="mt-4 flex justify-center">
                  <button
                    onClick={handleStartReinforcement}
                    className="flex items-center rounded-md border border-amber-500 bg-amber-500/10 px-4 py-2 text-sm font-medium text-amber-500 hover:bg-amber-500/20"
                  >
                    Reinforce This Concept
                  </button>
                </div>
              )}
          </div>
        )}
      </div>

      <div className="mt-6 flex justify-between">
        <button
          onClick={handlePreviousQuestion}
          disabled={currentQuestionIndex === 0}
          className={`flex items-center rounded-md px-4 py-2 text-sm ${
            currentQuestionIndex === 0
              ? "cursor-not-allowed border border-zinc-800 bg-zinc-900 text-zinc-600"
              : "border border-zinc-700 bg-zinc-800 text-white hover:bg-zinc-700"
          }`}
        >
          <FiChevronLeft className="mr-1" /> Previous
        </button>

        {hasSubmitted ? (
          <button
            onClick={handleNextQuestion}
            disabled={
              !questionStates.isCorrect[currentQuestionIndex] &&
              !questionStates.attemptedReinforcement[currentQuestionIndex]
            }
            className="flex items-center justify-center rounded-md bg-[#f0bb1c] px-4 py-2 text-sm font-medium text-black hover:bg-[#f0bb1c]/80 disabled:opacity-50"
          >
            {isLastQuestion ? "Finish Quiz" : "Next Question"}
            <FiChevronRight className="ml-1" />
          </button>
        ) : (
          <button
            onClick={handleSubmitAnswer}
            disabled={!selectedOptionId}
            className="flex items-center justify-center rounded-md bg-[#f0bb1c] px-4 py-2 text-sm font-medium text-black hover:bg-[#f0bb1c]/80 disabled:opacity-50"
          >
            Submit Answer
          </button>
        )}
      </div>
    </div>
  );
};

export default CoursePracticeQuiz;
